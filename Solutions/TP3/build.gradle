import org.formation.*

project.description = 'Projet TP3 : Concepts'
ext.srcDirectory = './src'
ext.outputDirectory = './bin'
ext.distDirectory = './dist'
ext.versionFile = file('version.properties')
ext.deployLocation = '/home/dthibau/Formations/Gradle/mywork/repo'


println "Configuration phase profile is : ${profile}"


// Pas d’utilisation de doFirst ou doLast => Tâche de configuration
// Exécutée dans la phase de configuration
task loadVersion { 
  project.version = readVersion()
  logger.info "Version is ${project.version}"

  doLast {
	project.version = readVersion()
  	logger.info "Version is ${project.version}"
  }
}

task clean(type: Delete) {
   logger.info "clean"
   delete outputDirectory
   delete distDirectory
}

task copyVersion(type: Copy) {
    from versionFile.canonicalPath
    into outputDirectory
}

task compile(type: Copy, dependsOn: copyVersion) {
    from (srcDirectory) {
		include '**/*.c'
		rename { String filename ->
        	filename.replace(".c", ".o")
    	}
	}
    into outputDirectory
}

task createDistribution(type: Zip, dependsOn: [compile,loadVersion]) {
  from outputDirectory
  destinationDirectory = file(distDirectory)

  doFirst {
	archiveFileName="${project.name}-${project.version}.zip"
  }
}

task deploy(type: Copy, dependsOn: createDistribution) {
	from (distDirectory) {
		include '*.zip'
	}
	into deployLocation
	doLast {
		logger.info("Deploying to $deployLocation")
	}
}

task prepareRelease(type : UpdateVersionTask) {
	projectVersion = new ProjectVersion(version.majorNumber,version.minorNumber,'FINAL')
	destFile versionFile
	doLast {
	  logger.info("Setting FINAL in version file")
  }
}

deploy.mustRunAfter prepareRelease


task makeReleaseVersion(type : UpdateVersionTask, dependsOn: [prepareRelease, deploy] ) {

	def nextMajorNumber=0
	def nextMinorNumber=1
// Configuration phase
// l’entrée est une propriété, la sortie le fichier modifié par la tâche
  inputs.property('nextMajorVersion', 0)
  inputs.property('nextMinorVersion', 1)

  destFile versionFile
  nextMajorNumber = project.properties.get('nextMajorVersion',version.majorNumber) 
  nextMinorNumber = project.properties.get('nextMinorVersion',version.minorNumber.toInteger()+1).toString()
  projectVersion = new ProjectVersion(nextMajorNumber.toInteger(),nextMinorNumber.toInteger(),'SNAPSHOT')
 
  doFirst {
	  logger.info("Prop minor ${project.properties.get('nextMinorVersion')}")
	  
  }
  doLast {
	logger.info("Setting SNAPSHOT to version file")
  }
}

task printProject {	
	doLast {
		println "${project.name} - ${project.description} "
	}
}



task printVersion {
	doFirst {
		println "Version is ${version}"
	}
}
// printVersion << {	 }

ProjectVersion readVersion() {
  logger.info 'Reading the version file.'
  if(!versionFile.exists()) {
    throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
  }

  Properties versionProps = new Properties()
  versionFile.withInputStream { stream -> versionProps.load(stream) }


  new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.classifier.toString())

}

